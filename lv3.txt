
import unittest

class MatrixError(Exception):
    """ An exc eption"""
    pass

class MatrixAssignmentError(MatrixError):
    """An exception class When wrong input"""
    def __init__(self, item, row_length):
        msg= "Wron input: trying to assing"
        msg += str(item) + " to a row of size "
        msg+= str(row_length)
        raise MatrixError(msg)

class MatrixDimensionsError(MatrixError):
    """An exception class When wrong dimensions"""
    def __init__(self):
        msg= "Wron dimension: matrices have to"
        msg +=" be of the ame rank"
        raise MatrixError(msg)

class MatrixZeroError(MatrixError):
    """An exception class When wrong number"""
    def __init__(self):
        msg= "Wron number: matrices not have"
        msg +=" divide"
        raise MatrixError(msg)
        
class Matrix(object):
    """ A Simple python matrix class """

    def __init__(self, m, n):
        if m<=0 and n<=0:
            raise MatrixError("Error ")
        self.m=m
        self.n=n
        self.rows=[]
        for i in range(m):
            row = [0]*n
            self.rows.append(row)

    def reset(self):
        for row in range(self.m):
            for col in range(self.n):
                self.rows[row][col]=0

    def add(self,mat):
        if self.m != mat.m or self.n != mat.n:
            raise MatrixDimensionsError()
        newmat=Matrix(self.m,self.n)
        for row in range(self.m):
            for col in range(self.n):
                newmat[row][col]=self.rows[row][col] + mat[row][col]
        return newmat

    def substract(self,mat):
        if self.m != mat.m or self.n != mat.n:
            raise MatrixDimensionsError()
        newmat=Matrix(self.m,self.n)
        for row in range(self.m):
            for col in range(self.n):
                newmat[row][col]=self.rows[row][col] - mat[row][col]
        return newmat

    def dotMultiply(self,mat):
        if self.m != mat.m or self.n != mat.n:
            raise MatrixDimensionsError()
        newmat=Matrix(self.m,self.n)
        for row in range(self.m):
            for col in range(self.n):
                newmat[row][col]=self.rows[row][col] * mat[row][col]
        return newmat

    def dotDivide(self,mat):
        if self.m != mat.m or self.n != mat.n:
            raise MatrixDimensionsError()
        for row in range(self.m):
            for col in range(self.n):
                if mat[row][col]==0:
                    raise MatrixZeroError()
        newmat=Matrix(self.m,self.n)
        for row in range(self.m):
            for col in range(self.n):
                newmat[row][col]=self.rows[row][col] / mat[row][col]
        return newmat

    def transpose(self):
        newmat=Matrix(self.n,self.m)
        for row in range(self.m):
            for col in range(self.n):
                newmat[col][row]=self.rows[row][col]
        return newmat

    def __str__(self):
        s=""  
        for row in self.rows:
            for col in row:
                s+=str(col)+"\t"
            s+= "\n"
        return s

    def __getitem__(self, idx):
        return self.rows[idx]

    def __setitem__(self, idx, item):
        if len(item) == self.n:
            self.rows[idx] = item
        else:
            raise MatrixAssignmentError(item, self.n)
           
    
    def __repr__(self):
        pass

    def __eq__(self, mat):
        return self.rows == mat.rows

    @classmethod
    def fromList(cls, listoflists):
        rows =len(listoflists)
        cols= len(listoflists[0])
        m=Matrix(rows,cols)
        for i in range(rows):
            m[i]=listoflists[i]
        return m

    @classmethod
    def zeros(cls, m,n):
        return Matrix(m,n)
        
    @classmethod
    def ones(cls, m,n):
        a=Matrix(m,n)
        for row in range(m):
            for col in range(n):
                a[row][col]=1
        return a

    @classmethod
    def eye(cls, m):
        a=Matrix(m,m)
        for row in range(m):
            for col in range(m):
                if row == col :
                    a[row][col]=1
        return a

class MatrixTests(unittest.TestCase):
    def testInit(self):
        m1=Matrix(2,2)
        m2=Matrix(1,1)        
        m1s="0\t0\t\n0\t0\t\n"
        m2s="0\t\n"
        self.assertTrue(str(m1) == m1s)
        self.assertTrue(str(m2) == m2s)
        with self.assertRaises(MatrixError) as context:
            m3=Matrix(0,0)
            m4=Matrix(-3,-4)

    def testAssignment(self):
        m1=Matrix(2,2)
        m1[1]=[1,1]
        m1s="0\t0\t\n1\t1\t\n"
        self.assertTrue(str(m1) == m1s)

    def testFromList(self):
        m1 = Matrix.fromList([[1,2],[2,3],[3,4]])
        m1s="1\t2\t\n2\t3\t\n3\t4\t\n"
        self.assertTrue(str(m1) == m1s)

    def testEqual(self):
        m1=Matrix(3,3)
        m2=Matrix.fromList([[0,0,0],[0,0,0],[0,0,0]])
        self.assertTrue(m1 == m2)
        m2[1]=[1,1,1]
        self.assertFalse(m1 == m2)

    def testReset(self):
        m1=Matrix.fromList([[2,3,4],[5,6,7]])   
        m2=Matrix(2,3)
        m1.reset()
        self.assertTrue(m1==m2)  

    def testAdd(self):
        m1=Matrix.fromList([[1,2],[3,4]])   
        m2=Matrix.fromList([[5,6],[7,8]]) 
        m3=Matrix.fromList([[6,8],[10,12]])
        m=m1.add(m2)
        self.assertTrue(m==m3)
        m4=Matrix.fromList([[1,2,3],[4,5,6]])
        with self.assertRaises(MatrixError) as context:
            m=m1.add(m4)

    def testsubstract(self):
        m1=Matrix.fromList([[1,2],[3,4]])   
        m2=Matrix.fromList([[5,6],[7,8]]) 
        m3=Matrix.fromList([[-4,-4],[-4,-4]])
        m=m1.substract(m2)
        self.assertTrue(m==m3)
        m4=Matrix.fromList([[1,2,3],[4,5,6]])
        with self.assertRaises(MatrixError) as context:
            m=m1.substract(m4)
    
    def testMultiply(self):
        m1=Matrix.fromList([[1,2],[3,4]])   
        m2=Matrix.fromList([[5,6],[7,8]]) 
        m3=Matrix.fromList([[5,12],[21,32]])
        m=m1.dotMultiply(m2)
        self.assertTrue(m==m3)
        m4=Matrix.fromList([[1,2,3],[4,5,6]])
        with self.assertRaises(MatrixError) as context:
            m=m1.dotMultiply(m4)

    def testDivide(self):
        m1=Matrix.fromList([[10,24],[21,40]])   
        m2=Matrix.fromList([[5,6],[7,5]]) 
        m3=Matrix.fromList([[2,4],[3,8]])
        m=m1.dotDivide(m2)
        self.assertTrue(m==m3)
        m4=Matrix.fromList([[1,0],[5,6]])
        with self.assertRaises(MatrixError) as context:
            m=m1.dotDivide(m4)

    def testtranspose(self):
        m1=Matrix.fromList([[1,2],[3,4]])   
        m2=Matrix.fromList([[1,3],[2,4]]) 
        m=m1.transpose()
        self.assertTrue(m==m2)
        m3=Matrix.fromList([[1,2,3],[4,5,6]])   
        m4=Matrix.fromList([[1,4],[2,5],[3,6]]) 
        mp=m3.transpose()
        self.assertTrue(mp==m4)
        m5=Matrix.fromList([[1,2],[3,4],[5,6]])   
        m6=Matrix.fromList([[1,3,5],[2,4,6]]) 
        mp1=m5.transpose()
        self.assertTrue(mp1==m6)

    def testZeros(self):
        m1=Matrix.zeros(2,2)
        m2=Matrix.fromList([[0,0],[0,0]])
        self.assertTrue(m1==m2)
        m3=Matrix.zeros(3,3)
        m4=Matrix.fromList([[0,0,0],[0,0,0],[0,0,0]])
        self.assertTrue(m3==m4)

    def testones(self):
        m1=Matrix.ones(2,2)
        m2=Matrix.fromList([[1,1],[1,1]])
        self.assertTrue(m1==m2)
        m3=Matrix.ones(3,3)
        m4=Matrix.fromList([[1,1,1],[1,1,1],[1,1,1]])
        self.assertTrue(m3==m4)

    def testeye(self):
        m1=Matrix.eye(2)
        m2=Matrix.fromList([[1,0],[0,1]])
        self.assertTrue(m1==m2)
        m3=Matrix.eye(3)
        m4=Matrix.fromList([[1,0,0],[0,1,0],[0,0,1]])
        self.assertTrue(m3==m4)
        

if __name__ == "__main__":
    unittest.main()